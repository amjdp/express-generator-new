#!/usr/bin/env node

/**
 * Module dependencies.
 */

/* import index.js */ 
var app = require('../index'); 
var debug = require('debug')('express-mongodb-api:server');
var http = require('http');
// const logger = require('../src/logger');
// const config = require('../src/config');

/**
 * Get port from environment and store in Express.
 */

/* Take port number from the process.env */
// var port = normalizePort(config.port);  
var port = normalizePort(process.env.PORT || '3000');
/* If port number is not given in process env, take 3000 as default */
app.set('port', port);  

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

/* Listen to http server running at port 3000 */
server.listen(port); 
/* If there is any error in server, trigger onError */ 
server.on('error', onError);  
/* It is used to bind and listen the connections on the specified host and port */
server.on('listening', onListening); 

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Server started at http://localhost:${port}`);
}

// ${config.port}
